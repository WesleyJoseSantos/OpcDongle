<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Gerdau | Laminação 2</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        outline: 0;
        box-sizing: border-box;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      }
      body {
        width: 100%;
        height: 100vh;
        padding-top: 30px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }
      .container {
        max-width: 420px;
        width: 100%;
        padding: 20px 15px;
        background: #1e1e1e;
        border: 1px solid #999;
        border-radius: 6px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-around;
      }
      .card {
        width: 100px;
        height: 120px;
        margin: 20px auto auto auto;
        background: #292929;
        border: 1px solid #999;
        border-radius: 6px;
      }
      .title {
        text-align: center;
        color: #f5f5f5;
      }
      header.title span {
        font-size: 3em;
      }
      .container form {
        width: 100%;
        margin-top: 10px;
      }
      .container select {
        width: 100%;
        height: 23px;
      }
      .value-display {
        width: 97%;
        height: 33px;
        margin-top: 15px;
        border: 1px solid #444;
        border-radius: 6px;
        padding: 5px;
      }
      .label {
        color: #f5f5f5;
        font-size: 1em;
        align-self: flex-start;
      }
      .divider {
        border-bottom: 1px solid #ccc;
        margin-top: 20px;
        margin-bottom: 30px;
      }
      .btn {
        margin: 8px;
        width: 100%;
        height: 35px;
        border: none;
        border-radius: 6px;
        font-weight: bold;
        font-size: 1em;
        cursor: pointer;
        color: #fff;
        background: #007ACC;
      }
      .btn:hover {
        background: #1C97EA;
      }
      ul {
        list-style: none;
      }
      li {
        padding-top: 10px;
        margin-left: 5px;
        color: #fff;
      }
      .bloch, .block {
        display:inline-block;
        height: 10px;
        width: 10px;
      }
      .on {background: green;}
      .off {background: lightgray;}
      .rdy {background: darkblue;}
      .warning {background: gold;}
      .err {background: red;}
      .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background: #2b2b2b;
        width: 100%;
        border-radius: 6px;
      }
      .tab button {
        background-color: inherit;
        float: left;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 14px 16px;
        transition: 0.3s;
        font-size: 17px;
        color: #fff;
      }
      .tab button:hover {
        background: #1C97EA;
      }
      .tab button.active {
        background: #007ACC;
      }
      .tabcontent {
        display: none;
        max-width: 420px;
        min-height: 410px;
        width: 100%;
        padding: 20px 15px;
        background: #1e1e1e;
        border: 1px solid #999;
        border-radius: 6px;
        flex-direction: column;
        align-items: center;
        justify-content: space-around;
        color: #fff;
      }
      .circle{
        padding: 8px;
      }
      .column{
        float: left;
        width: 33%;
      }
      .row:after{
        content: "";
        display: table;
        clear: both;
      }
    </style>
  </head>
  <body>
    <div class="container">

      <header class="title">
        <span>GERDAU</span>
        <h3>Leito</h3>
        <div class="divider"></div>
      </header>

      <div class="tab">
        <button class="tablinks" onclick="openTab(event, 'GRL')">Geral</button>
        <button class="tablinks" onclick="openTab(event, 'REMP')">REMP</button>
        <button class="tablinks" onclick="openTab(event, 'TC0')">TC0</button>
        <button class="tablinks" onclick="openTab(event, 'CTF')">CTF</button>
        <button class="tablinks" onclick="openTab(event, 'Rolos')">Rolos</button>
      </div>

      <div id="GRL" class="tabcontent">
        <h3>Geral</h3>
        <ul><li><span id="REDE_SAIDA_ST" class='bloch err'></span>
          Status  Comunicação DPDP
        </li></ul>
        <ul><li><span id="NR12_ST" class='bloch err'></span>
          Status NR12
        </li></ul>
        <ul><li><span id="EM_PC10_ST" class='bloch err'></span>
          Emergência Mesa de Operação
        </li></ul>
        <ul><li><span id="ALIM_220" class='bloch err'></span>
          Alimentação 220V
        </li></ul>
        <ul><li><span id="ALIM_380" class='bloch err'></span>
          Alimentação 380V
        </li></ul>
      </div>

      <div id="REMP" class="tabcontent">
        <h3>Rolos Emparelhadores</h3>
        <ul><li><span id="REMP_ST" class='bloch err'></span>
          Status Motores   
        </li></ul>
        <ul><li><span id="EM_REMP" class='bloch err'></span>
          Status Emergência
        </li></ul>
        <div class="row">
          <div class="column">
            <div class="card">
              <p class="title">Referência</p>
              <div id="REMP_REF" class="circle"></div>
            </div>
          </div>
          <div class="column">
            <div class="card">
              <p class="title">Velocidade</p>
              <div id="REMP_VEL" class="circle"></div>
            </div>
          </div>
          <div class="column">
            <div class="card">
              <p class="title">Torque</p>
              <div id="REMP_TQ" class="circle"></div>
            </div>
          </div>
        </div>
      </div>

      <div id="TC0" class="tabcontent">
        <h3>Transferidor de Correntes do Leito</h3>
        <ul><li><span id="TC0_ST" class='bloch err'></span>
          Status Motores
        </li></ul>
        <ul><li id="TC0_POS" class="value-display">
          Posição Atual:
        </li></ul>
        <ul><li id="TC0_NUM_BAR" class="value-display">
          Número de Barras Atual:
        </li></ul> 
      </div>

      <div id="CTF" class="tabcontent">
        <h3>Carro de Transferência</h3>
        <ul><li><span id="CTF_ST" class='bloch err'></span>
          Status Motor  
        </li></ul>
        <ul><li><span id="CTF_SYNC" class='bloch err'></span>
          Status Sincronização
        </li></ul>
        <ul><li><span id="CTF_ABAIXO" class='block err'></span>
          Sensor Carro Abaixo
        </li></ul>
        <ul><li><span id="CTF_ACIMA" class='block err'></span>
          Sensor Carro Acima
        </li></ul>
        <ul><li><span id="CTF_ADIANTE" class='block err'></span>
          Sensor Carro Adiante
        </li></ul>
        <ul><li><span id="CTF_ATRAS" class='block err'></span>
          Sensor Carro Atrás
        </li></ul>
        <ul><li><span id="CTF_ADIANTE_ERR" class='bloch err'></span>
          Carro excedeu posição adiante
        </li></ul>
        <ul><li><span id="CTF_ATRAS_ERR" class='bloch err'></span>
          Carro excedeu posição atrás
        </li></ul>
        <ul><li id="CTF_POS1" class="value-display">
          Posição Atual Carro 1:
        </li></ul>
        <ul><li id="CTF_POS2" class="value-display">
          Posição Atual Carro 2:
        </li></ul> 
      </div>

      <div id="Rolos" class="tabcontent">
        <h3>GR1 e GR2</h3>
        <ul><li><span id="GR1_ST" class='bloch err'></span>
          Status Motor GR1
        </li></ul>
        <ul><li><span id="GR2_ST" class='bloch err'></span>
          Status Motor GR2
        </li></ul>
        <ul><li><span id="EM_PC11_ST" class='bloch err'></span>
          Emergência Posto Local
        </li></ul>
        <ul><li><span id="GR_PRESFX_4" class='block err'></span>
          Sensor presença de feixe 4
        </li></ul>
        <ul><li><span id="GR_PRESFX_3" class='block err'></span>
          Sensor presença de feixe 3
        </li></ul>
        <ul><li><span id="GR_PRESFX_2" class='block err'></span>
          Sensor presença de feixe 2
        </li></ul>
        <ul><li><span id="GR_PRESFX_1" class='block err'></span>
          Sensor presença de feixe 1
        </li></ul>
      </div>

      <button onclick="showScreen('home.htm')" class="btn">Voltar</button>
    </div>
      
    <script>
      window.scrollTo(0,0);
      
      function showScreen(screen) {
        window.location.href = "/?screen=" + screen
      }

      function openTab(evt, tabName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
          tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
          tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        if(evt != null)
          evt.currentTarget.className += " active";
      }

      setInterval(function ( ) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            var data = JSON.parse(this.responseText);
            console.log(this.responseText);
            if(data != null){
              for (const key in data) {
                if (Object.hasOwnProperty.call(data, key)) {
                  const value = data[key];
                  updateObject(key, value);
                }
              }
            }
          }
        };
        xhttp.open("GET", "/?data=true", true);
        xhttp.send();
      }, 1000) ;

      function updateObject(id, value){
        var obj = document.getElementById(id);
        if(obj != null){
          if(obj.classList.contains("bloch")){
            obj.className = value ? "bloch on" : "bloch err";
          }
          if(obj.classList.contains("block")){
            obj.className = value ? "block on" : "block off";
          }
          if(obj.classList.contains("value-display")){
            var label = obj.innerText.split(":")[0] + ": ";
            obj.innerText = label + value;
          }
          if(obj.classList.contains("circle")){
            obj = new RadialProgress(document.getElementById(id));
            if(obj!=null){
                obj.setValue(Math.abs(value / 100));
            }
          }
        }
      }

      window.rp_requestAnimationFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||(function(callback,element){setTimeout(callback,1000/60);});
      function RadialProgress(container,cfg){
        container.innerHTML="";
        var nc=document.createElement("div");
        nc.style.width="10em"; nc.style.height="10em";
        nc.style.position="relative";
        container.appendChild(nc);
        container=nc;
        if(!cfg) cfg={};
        this.colorBg=cfg.colorBg==undefined?"#404040":cfg.colorBg;
        this.colorFg=cfg.colorFg==undefined?"#007FFF":cfg.colorFg;
        this.colorText=cfg.colorText==undefined?"#FFFFFF":cfg.colorText;
        this.indeterminate=cfg.indeterminate==undefined?false:cfg.indeterminate;
        this.round=cfg.round==undefined?false:cfg.round;
        this.thick=cfg.thick==undefined?2:cfg.thick;
        this.progress=cfg.progress==undefined?0:cfg.progress;
        this.noAnimations=cfg.noAnimations==undefined?1:cfg.noAnimations;
        this.fixedTextSize=cfg.fixedTextSize==undefined?false:cfg.fixedTextSize;
        this.animationSpeed=cfg.animationSpeed==undefined?1:cfg.animationSpeed>0?cfg.animationSpeed:1;
        this.noPercentage=cfg.noPercentage==undefined?false:cfg.noPercentage;
        this.spin=cfg.spin==undefined?false:cfg.spin;
        this.noAnimations = true;
        this.noInitAnimation = true;
        if(this.noInitAnimation) this.aniP=this.progress; else this.aniP=0;
        var c=document.createElement("canvas");
        c.style.position="absolute";c.style.top="0";c.style.left="0";c.style.width="50%";c.style.height="50%";c.className="rp_canvas";
        container.appendChild(c);
        this.canvas=c;
        var tcc=document.createElement("div");
        tcc.style.position="absolute";tcc.style.display="table";tcc.style.width="50%";tcc.style.height="50%";
        var tc=document.createElement("div");
        tc.style.display="table-cell";tc.style.verticalAlign="middle";
        var t=document.createElement("div");
        t.style.color=this.colorText;t.style.textAlign="center";t.style.overflow="visible";t.style.whiteSpace="nowrap";t.className="rp_text";
        tc.appendChild(t);
        tcc.appendChild(tc);
        container.appendChild(tcc);
        this.text=t;
        this.prevW=0; this.prevH=0; this.prevP=0; this.indetA=0; this.indetB=0.2; this.rot=0;
        this.draw=function(f){
          if(!(f==true))rp_requestAnimationFrame(this.draw);
          var c=this.canvas;
          var dp=window.devicePixelRatio||1;
          c.width=c.clientWidth*dp; c.height=c.clientHeight*dp;
          if(!(f==true)&&!this.spin&&!this.indeterminate&&(Math.abs(this.prevP-this.progress)<1&&this.prevW==c.width&&this.prevH==c.height)) return;
          var centerX=c.width/2, centerY=c.height/2, bw=(c.clientWidth/100.0), radius=c.height/2-(this.thick*bw*dp)/2, bw=(c.clientWidth/100.0);
          this.text.style.fontSize=(this.fixedTextSize?(c.clientWidth*this.fixedTextSize):(c.clientWidth*0.26-this.thick))+"px";
          if(this.noAnimations) this.aniP=this.progress; else{var aniF=Math.pow(0.93,this.animationSpeed);this.aniP=this.aniP*aniF+this.progress*(1-aniF);}
          c=c.getContext("2d");
          c.beginPath();
          c.strokeStyle=this.colorBg;
          c.lineWidth=this.thick*bw*dp;
          c.arc(centerX,centerY,radius,-Math.PI/2, 2*Math.PI);
          c.stroke();
          c.beginPath();
          c.strokeStyle=this.colorFg;
          c.lineWidth=this.thick*bw*dp;
          if(this.round) c.lineCap="round";
          if(this.indeterminate){
            this.indetA=(this.indetA+0.07*this.animationSpeed)%(2*Math.PI);this.indetB=(this.indetB+0.14*this.animationSpeed)%(2*Math.PI);
            c.arc(centerX,centerY,radius,this.indetA, this.indetB);
            if(!this.noPercentage)this.text.innerHTML="";
          }else{
            if(this.spin&&!this.noAnimations)this.rot=(this.rot+0.07*this.animationSpeed)%(2*Math.PI)
            c.arc(centerX,centerY,radius,this.rot-Math.PI/2, this.rot+this.aniP*(2*Math.PI)-Math.PI/2);
            if(!this.noPercentage)this.text.innerHTML=Math.round(100*this.aniP)+" %";
          }
          c.stroke();
          this.prevW=c.width; this.prevH=c.height; this.prevP=this.aniP;
        }.bind(this);
        this.draw();
      }

      RadialProgress.prototype={
        constructor:RadialProgress,
        setValue:function(p){this.progress=p<0?0:p>1?1:p;},
        setIndeterminate:function(i){this.indeterminate=i;},
        setText:function(t){this.text.innerHTML=t;}
      }
      
      openTab(null, "GRL");

      var bar1 = new RadialProgress(document.getElementById("REMP_REF"));
      bar.setValue(0.5);

      var bar2 = new RadialProgress(document.getElementById("REMP_VEL"));
      bar2.setValue(0.5);

      var bar3 = new RadialProgress(document.getElementById("REMP_TQ"));
      bar3.setValue(0.5);

    </script>
  </body>
</html>
